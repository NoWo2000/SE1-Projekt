{"ast":null,"code":"var affectedSystemsArray = [\"DNS-Server\", \"Database\", \"PAX-System\", \"IT-Desk\", \"Firewall\", \"Switchboard\", \"File-Server\", \"Backup-Server\", \"Print-Server\", \"Mail-Server\", \"Coffee Machine\"];\nvar suspectedAttackTypeArray = [\"SQL-Injection\", \"Denial of Service\", \"Man in the Middle\", \"Brute Force\", \"Virus\", \"Trojan\", \"Registry-Attack\", \"Remote Binary Planting\", \"Server Message Block\"];\nvar automaticReactionArray = [\"System-Shutdown\", \"Database-Shutdown\", \"System-Restart\", \"Disconnect from Internet\", \"Disconnect affected Systems\", \"Blocked User-Login\"];\nvar checkListArray = [\"restart the system\", \"call Incident-Response-Team\", \"reset login data\", \"stop all departures\", \"shut down the database\", \"stop all arrivals\", \"notify your manager\", \"drink some coffee\", \"take a break\", \"change server location\", \"get help\"];\n\nfunction shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n\n  return a;\n}\n\nfunction generateRandomAlarm() {\n  var today = new Date();\n  var randomProbability = Math.floor(Math.random() * 26) + 75;\n  return {\n    id: Math.floor(Math.random() * 1000000),\n    time: today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds(),\n    date: today.getDate() + '.' + (today.getMonth() + 1) + '.' + today.getFullYear(),\n    affectedSystems: [shuffle(affectedSystemsArray).splice(affectedSystemsArray.length - (1 + Math.floor(Math.random() * 2)))],\n    suspectedAttackType: suspectedAttackTypeArray[Math.floor(Math.random() * suspectedAttackTypeArray.length)],\n    probability: randomProbability,\n    automaticReaction: randomProbability > 95 ? [shuffle(automaticReactionArray).splice(automaticReactionArray.length - (1 + Math.floor(Math.random() * 1)))] : [],\n    checklist: shuffle(checkListArray).splice(checkListArray.length - (2 + Math.floor(Math.random() * 5)))\n  };\n}\n\nexport { generateRandomAlarm };","map":{"version":3,"sources":["/Users/silaspohl/Desktop/Studium/3. Semester/Software Engineering/gui/src/generateAlarm.js"],"names":["affectedSystemsArray","suspectedAttackTypeArray","automaticReactionArray","checkListArray","shuffle","a","i","length","j","Math","floor","random","generateRandomAlarm","today","Date","randomProbability","id","time","getHours","getMinutes","getSeconds","date","getDate","getMonth","getFullYear","affectedSystems","splice","suspectedAttackType","probability","automaticReaction","checklist"],"mappings":"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","sourcesContent":["var affectedSystemsArray = [\"DNS-Server\", \"Database\", \"PAX-System\", \"IT-Desk\", \"Firewall\", \"Switchboard\", \"File-Server\", \"Backup-Server\", \"Print-Server\", \"Mail-Server\", \"Coffee Machine\"];\nvar suspectedAttackTypeArray = [\"SQL-Injection\", \"Denial of Service\", \"Man in the Middle\", \"Brute Force\", \"Virus\", \"Trojan\", \"Registry-Attack\", \"Remote Binary Planting\", \"Server Message Block\"];\nvar automaticReactionArray = [\"System-Shutdown\", \"Database-Shutdown\", \"System-Restart\", \"Disconnect from Internet\", \"Disconnect affected Systems\", \"Blocked User-Login\"]\nvar checkListArray = [\"restart the system\", \"call Incident-Response-Team\", \"reset login data\", \"stop all departures\", \"shut down the database\", \"stop all arrivals\", \"notify your manager\", \"drink some coffee\", \"take a break\", \"change server location\", \"get help\"]\n\nfunction shuffle(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\n\nfunction generateRandomAlarm() {\n\n    var today = new Date();\n    var randomProbability = Math.floor(Math.random() * 26) + 75\n\n    return {\n        id: Math.floor(Math.random() * 1000000),\n        time: today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds(),\n        date: today.getDate() + '.' + (today.getMonth() + 1) + '.' + today.getFullYear(),\n        affectedSystems: [shuffle(affectedSystemsArray).splice(affectedSystemsArray.length - (1 + Math.floor(Math.random() * 2)))],\n        suspectedAttackType: suspectedAttackTypeArray[Math.floor(Math.random() * suspectedAttackTypeArray.length)],\n        probability: randomProbability,\n        automaticReaction: randomProbability > 95 ? [shuffle(automaticReactionArray).splice(automaticReactionArray.length - (1 + Math.floor(Math.random() * 1)))] : [],\n        checklist: shuffle(checkListArray).splice(checkListArray.length - (2 + Math.floor(Math.random() * 5)))\n    }\n}\n\nexport { generateRandomAlarm };"]},"metadata":{},"sourceType":"module"}